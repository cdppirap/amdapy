.. amdapy documentation master file, created by
   sphinx-quickstart on Fri Feb 12 12:11:41 2021.
   You can adapt this file completely to your liking, but it should at least
   contain the root `toctree` directive.

Welcome to amdapy's documentation!
==================================

This package aims to offer streamlined access to heliophysics dataset provided by AMDA (and other 
providers).

.. toctree::
   :maxdepth: 3
   :caption: Contents:

   modules


Indices and tables
==================

* :ref:`genindex`
* :ref:`modindex`
* :ref:`search`


Introduction
------------

The :program:`amdapy` package is an API whose aim is to provide easy access to heliophysics datasets as
well as tools for analysing the data. Datasets are available through a multitude of different providers
and stored using various file formats, whereas the data itself may be similar between two mission they
may be stored under completely different file formats. It is then the researchers job to retrieve the 
data and convert it to a usable format. Although this process is not particularly difficult it is 
time consumming and the problem is compounded when dealing with multiple datasets. :program:`amdapy`
aims to streamline this process, so retrieving data under a given format is done in a single line.

.. code-block:: python

   dataset1 = amdapy.get_dataset(id="dataset1", provider="PDS")

:program:`amdapy` offers easy acces to a list of data providers and their datasets. Elements can be
accessed through iterators, the following example illustrates how one would iterate over all datasets
provided by the PDS service : 

.. code-block:: python

   provider=amdapy.provider.Provider(name="PDS")
   for dataset in provider.iter_dataset():
     print(dataset)

Variables and Datasets
----------------------

Variables and datasets are the basic building blocks of this project. They are purposefully defined
as very generic containers so as to be as versatile as possible. Variable objects allow access to the
data, they are defined as a quadruplet (name, data type, shape, value). The variable's name should
always be unique within a given context (a dataset cannot contain two variables with the same name).
Data is stored as :data:`numpy.array` objects, as such we use the same conventions for datatypes, shapes
and value storing. Variables can be multidimensional, in which case its values can be accessed using
bracket operators. Variables are instantiated with the :class:`amdapy.core.variable.Variable` class :

.. code-block:: python

   var = amdapy.core.variable.Variable(name="a", dtype=float, value=10)

An array is initialised in a similar manner : 

.. code-block:: python

   md_var = amdapy.core.variable.Variable(name="b", dtype=float, value=np.ones(10))

Datasets are simply a named list of variable objects. The :meth:`amdapy.core.dataset.Dataset.iter_variable`
method allows to iterate over the variable objects contained. Adding a variable to a datasets that
already contains a variable with the same name will raise an exception.

AMDA datasets
-------------

Accessing AMDA datasets is done through methods provided by the :class:`amdapy.amda.AMDA` class. Getting datasets from AMDA : 

.. code-block:: python

   >>> amda = amdapy.amda.AMDA()
   >>> # iterate over datasets
   >>> for dataset in amda.iter_dataset():
   >>>   print("Dataset id : {}".format(dataset.id))
   AMDADataset(id:ace-imf-all)
   AMDADataset(id:ace-mag-real)
   ...
   AMDADataset(id:wnd-swe-kp)

The objects returned by :meth:`amdapy.amda.AMDA.iter_dataset` are of type :class:`amdapy.amda.AMDADataset`. Retrieving the contents of the dataset can be time consumming, thus a call to the 
:meth:`amdapy.amda.AMDADataset.load` method is needed before accessing the contents of the dataset. 
The available information are the start and stop time of the dataset and the shape of it's variables. 
A specific dataset can be retrieved by its :data:`id` with the :meth:`amdapy.amda.AMDA.get_dataset` method.

Once the data has been loaded the user can access the variables of the dataset.

.. code-block:: python

   >>> dataset_id="ace-imf-all"
   >>> dataset = amda.get_dataset(dataset_id)
   >>> print([variable.name for variable in dataset.variables])
   []
   >>> dataset.load()
   >>> print([variable.name for variable in dataset.variables])
   ['imf_mag','imf','imf_gsm']

Data providers
--------------

Datasets are available on a multitude of platforms, the ones :program:`amdapy` provides access to are
AMDA, PDS, CDAWEB. The last two providers offer a public index listing all available datasets. New 
providers may be defined by sublcassing the :class:`amdapy.provider.DataProvider` class. We can view
the list of providers through the :meth:`amdapy.provider.iter_provider`. Providers are identified 
by their name, which should be unique. The simplest data providers are built around manipulating their
public index. New providers can easly be defined for any website offering a public index of their data
files.

The :meth:`amdapy.ddtime.DDTime.from_datetime` method. 
